@startuml
'skinparam classAttributeIconSize 0

'---herencia---'


class Persona{
    - String nombre
    - String apellido
    - String dirección
    - String edad
    - String sexo
    'pasivo / activo (fuiste un transeunte)' 'EVALUAR BOOLEANOS SOBRE ENUM | CLASE CONCRETA'
    - Boolean estado
    'disponibilidad para recibir notificaciones'
    - Boolean notificaciones

    + void prenderNotificaciones()
    + void apagarNotificaciones()

}

Persona --o Cuidador
Persona --o Transeunte

class Cuidador{
    - Persona cuidador

    +Boolean aceptoViaje(Viaje)
}

class Transeunte{
    - Persona transeunte
    - Set<Cuidador> cuidadoresPendientes
    - Set<Cuidador> cuidadoresConfirmados
    - Viaje viaje

    + armarViaje(Ubicacion actual, Ubicacion destino)
    'LOS QUE ACEPTAN EL CUIDADO SE AGREGAN A LA LISTA DE CUIDADORES'
    + elegirCuidador(Cuidador cuidador)
    /'

     ----DESCRIPCION DE ELEGIR CUIDADORES----
    1paso
    - lista cuidadoresPendientes: julian, juan, juana, maria
    2paso:
    - aceptas o no? envio de notificacion de confirmación
    - boton de comenzar bloqueado
    - espera a que confirme al menos 1 cuidador
    3paso:
    - meter a lista de cuidadoresConfirmados aquellos que confirmaron
    - lista cuidadoresConfirmados: julian, juan
    - Tan pronto un cuidador acepta se permite comenzar el viaje
    '/
    + removerCuidador(Cuidador cuidador)
    +consultaAceptanViaje()
    'POSIBILIDAD DE USAR TEMPLATE METHOD'
    'APAGAMOS NOTIFICACIONES | NOTIFICAMOS A LOS CUIDADORES QUE ARRANCO EL VIAJE | INICIAMOS EL CRONOMETRO DEL VIAJE
    + void comenzarViaje()
    'PRENDEMOS NOTIFICACIONES | NOTIFICAR A LOS CUIDADORES QUE SE LLEGO BIEN
    + void llegueBien()
    'Le notifica a los cuidadores que arranco el viaje'
    - notificarArranqueViaje()
}

'--para un destino único--'
class Viaje{
    - Ubicacion ubicacionInicial
    - Ubicacion ubicacionFinal
    - TipoAlerta tipoDeAlerta
    'en minutos'
    - double demoraAprox
    'en metros'
    - double distancia
    '- double cronometro = 0
    - Temporizador cronometro;
    - List<Cuidador> cuidadoresConfirmados;

    + calcularDistanciaYDemora(CalculadorDistancia, CalculadorDemora)
    + alertarPeligro()
    + iniciarCronometro()
}

Viaje -UP-* Transeunte
Viaje *-LEFT- Ubicacion
Viaje *-RIGHT- TipoAlerta
Viaje ..> CalculadorDistancia
Viaje ..> CalculadorDemora

interface TipoAlerta {
    +void alertar()
}

TipoAlerta <|.. MensajeAlerta
TipoAlerta <|.. LlamadaPolicia
TipoAlerta <|.. LlamadaUsuario
TipoAlerta <|.. FalsaAlarma

class MensajeAlerta {
    'Enviar un mensaje de alerta a sus cuidadores
    +alertar()
}
class LlamadaPolicia {
    'Realizar una llamada automática a la policía
    +alertar()
}
class LlamadaUsuario {
    'Realizar una llamada al celular del usuario
    +alertar()
}
class FalsaAlarma {
    -Integer minutosEspera
    'Esperar N minutos para ver si es una falsa alarma (los minutos deben ser parametrizables)
    +alertar()
}

class Ubicacion{
    - String descripcion
    - Float latitud
    - Float longitud
}


'REVISAR SI NO ES UN PATRON DE DISEÑO'
interface CalculadorDistancia{
    + distanciaEntre(Ubicacion, Ubicacion);
}

interface CalculadorDemora{
    + demoraAproxTrayecto(double);
}



@enduml